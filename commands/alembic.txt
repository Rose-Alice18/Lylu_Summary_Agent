========================Alembic Setup========================
# start alembic (run once in your project directory to initialize)
alembic init migrations

# this creates an 'alembic.ini' file and a 'migrations/' folder


========================Configuration Steps========================
# open alembic.ini and set the SQLAlchemy URL for your database
# Example:
# sqlalchemy.url = postgresql://username:password@localhost/dbname

# go to migrations/env.py and import your models to make 'autogenerate' work
# Example:
# from myapp.models import Base
# target_metadata = Base.metadata


========================Creating Migrations========================
# create a new migration file with autogenerated schema changes
alembic revision --autogenerate -m "Describe your changes"

# OR create an empty revision file (you'll write the changes manually)
alembic revision -m "Manual changes"


========================Applying Migrations========================
# apply the latest migration(s) to the database
alembic upgrade head

# apply up to a specific version
alembic upgrade <revision_id>


========================Rolling Back Changes========================
# revert the last migration (go back one step)
alembic downgrade -1

# revert to a specific version
alembic downgrade <revision_id>

# revert all the way back to base (initial state)
alembic downgrade base


========================Viewing History========================
# show a list of all migrations
alembic history

# show current migration state
alembic current

# show current version in database
alembic heads

# show the history with a graph
alembic history --verbose


========================Managing Revisions========================
# merge two or more heads into one (useful if branches conflict)
alembic merge -m "Merge heads" <revision1_id> <revision2_id>

# stamp the database with a specific version without running migrations
alembic stamp head

# stamp the database as "base" version (clean slate)
alembic stamp base




===========================DROP TABLES DURING MANUAL INTERVENTION=========
# this is just a sample, change table names in other projects to match:
# this is to be used after doing auto generate revision and trying to upgrade to head:

def upgrade() -> None:
    """Upgrade schema."""
    # Drop all tables using raw SQL with CASCADE
    tables = [
        "project_donor_link",
        "receipts",
        "refresh_tokens",
        "admins",
        "beneficiaries",
        "milestones",
        "parties",
        "budget_fields",
        "progress",
        "donors",
        "budgets",
        "projects"
    ]

    for table in tables:
        op.execute(f'DROP TABLE IF EXISTS {table} CASCADE')
